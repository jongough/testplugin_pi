#!/usr/bin/env bash

#
# Upload the .tar.gz and .xml artifacts to cloudsmith
#
# Builds are uploaded the either the stable or the unstable
# repo. If there is a tag pointing to current commit it goes
# to stable, otherwise to unstable.
#
# If the environment variable CLOUDSMITH_PROD_REPO exists it is
# used as the production repo, defaulting to the hardcoded PROD_REPO
# value. Likewise for CLOUDSMITH_BETA_REPO and BETA_REPO and
# CLOUDSMIT_ALPHA_RERP and ALPHA_REPO
#

set -xe

PROD_REPO=${CLOUDSMITH_PROD_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-prod'}
BETA_REPO=${CLOUDSMITH_BETA_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-beta'}
ALPHA_REPO=${CLOUDSMITH_ALPHA_REPO:-'@CLOUDSMITH_USER@/@CLOUDSMITH_BASE_REPOSITORY@-pkg'}
PKG_EXT=${CLOUDSMITH_PKG_EXT:-'deb'}

if [ -z "$CIRCLECI" ] && [ -z "$TRAVIS" ]; then
    exit 0;
fi

if [ "$CIRCLECI" ]; then
    BUILD_ID=${CIRCLE_BUILD_NUM:-1}
    BUILD_DIR=$HOME/project/build
    BUILD_BRANCH=$CIRCLE_BRANCH
    BUILD_TAG=$CIRCLE_TAG
else
    BUILD_ID=${TRAVIS_BUILD_NUM:-1}
    BUILD_DIR=$TRAVIS_BUILD_DIR/build
    BUILD_BRANCH=$TRAVIS_BRANCH
    BUILD_TAG=$TRAVIS_TAG
fi

set +x
if [ -z "$CLOUDSMITH_API_KEY" ]; then
    echo 'Cannot deploy to cloudsmith, missing $CLOUDSMITH_API_KEY'
    exit 0
fi
set -x

if pyenv versions 2>&1 >/dev/null; then
    pyenv versions
    if ! pyenv global 3.7.1 2>&1 >/dev/null; then
      pyenv global 3.7.0
    fi
    #pyenv global 3.7.1
    python3 -m pip install -q cloudsmith-cli
    pyenv rehash
elif dnf --version 2>&1 >/dev/null; then
    sudo dnf install python3-pip python3-setuptools
    sudo python3 -m pip install -q cloudsmith-cli
elif apt-get --version 2>&1 >/dev/null; then
    COUNTER=0
    until
        sudo apt-get install python3-pip python3-setuptools
    do
        if [ "$COUNTER" -gt  "20" ]; then
            exit -1
        fi
        sleep 5
        ((COUNTER++))
    done
    sudo python3 -m pip install -q cloudsmith-cli
else
    sudo -H python3 -m ensurepip
    sudo -H python3 -m pip install -q setuptools
    sudo -H python3 -m pip install -q cloudsmith-cli
fi

commit=$(git rev-parse --short=7 HEAD) || commit="unknown"
tag=$(git tag --contains HEAD)

ls -la
pwd
xml=$(ls $BUILD_DIR/*.xml)
cat $xml
tarball=$(ls $BUILD_DIR/*.tar.gz)
tarball_basename=${tarball##*/}

source $BUILD_DIR/pkg_version.sh
tarball_name=@PACKAGE@-${PKG_TARGET}-${PKG_TARGET_VERSION}-${OCPN_TARGET}-tarball
pkg=$(ls $BUILD_DIR/*.${PKG_EXT})

source $BUILD_DIR/pkg_version.sh
echo $BUILD_BRANCH
echo $BUILD_TAG
echo ${#BUILD_TAG}

BUILD_BRANCH_LOWER=`echo $BUILD_BRANCH | tr '[A-Z]' '[a-z]'`
if [ "$BUILD_BRANCH_LOWER" = "master" ]; then
    echo "In master branch "
    if [ -n "$BUILD_TAG"  ]; then
        echo "building with tag"
        VERSION=$BUILD_TAG
        REPO="$PROD_REPO"
    else
        VERSION="@PROJECT_VERSION@+${BUILD_ID}.${commit}"
        echo "building without tag"
        REPO="$BETA_REPO"
    fi
else
    echo "In non master branch"tarball_name
    if [ -n "$BUILD_TAG" ]; then
        echo "buildnig with tag"
        VERSION=$BUILD_TAG
        REPO="$BETA_REPO"
    else
        echo "building without tag"
        VERSION="@PROJECT_VERSION@+${BUILD_ID}.${commit}"
        REPO="$ALPHA_REPO"
    fi
fi
echo $VERSION
echo $REPO
echo $PKG_REPO

sudo sed -i -e "s|--pkg_repo--|$REPO|"  $xml
sudo sed -i -e "s|--name--|$tarball_name|" $xml
sudo sed -i -e "s|--version--|$VERSION|" $xml
sudo sed -i -e "s|--filename--|$tarball_basename|" $xml

cat $xml
ls -l build

cloudsmith push raw --republish --no-wait-for-sync \
    --name @PACKAGE@-@PKG_TARGET@-@PKG_TARGET_VERSION@-${OCPN_TARGET}-metadata \
    --version ${VERSION} \
    --summary "@PACKAGE@ opencpn plugin metadata for automatic installation" \
    $REPO $xml

cloudsmith push raw --republish --no-wait-for-sync \
    --name $tarball_name \
    --version ${VERSION} \
    --summary "@PACKAGE@ opencpn plugin tarball for automatic installation" \
    $REPO $tarball

cloudsmith push raw --republish --no-wait-for-sync \
    --name @PACKAGE@-@PKG_TARGET@-@PKG_TARGET_VERSION@.${PKG_EXT} \
    --version ${VERSION} \
    --summary "@PACKAGE@ .${PKG_EXT} installation package" \
    $REPO $pkg
